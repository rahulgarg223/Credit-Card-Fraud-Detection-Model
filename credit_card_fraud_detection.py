# -*- coding: utf-8 -*-
"""Credit_Card_Fraud_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rve-qGCXW6SAwFUZlk75aN-_ieeiPAbY

Credit Card Fraud Detection Model
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, f1_score, recall_score
from sklearn.impute import SimpleImputer

sns.set()
# %matplotlib inline

df = pd.read_csv('creditcard.csv')
print(df.shape)
df.head()

"""Extracting basic information from the given dataset"""

df.info()

"""Describing the basically about the dataset"""

df.describe()

"""Classifying the class"""

class_names = {0: 'Not Fraud', 1: 'Fraud'}
print(df.Class.value_counts().rename(index=class_names))

"""Plotting the important plots"""

fig = plt.figure(figsize=(15, 12))
for i, col in enumerate([f'V{i}' for i in range(1, 29)] + ['Amount'], start=1):
    plt.subplot(5, 6, i)
    plt.plot(df[col])
plt.show()

"""Feature labeling"""

feature_names = df.iloc[:, 1:30].columns
target_name = 'Class'

data_features = df[feature_names]
data_target = df[target_name]

imputer = SimpleImputer(strategy='mean')
data_features = pd.DataFrame(imputer.fit_transform(data_features), columns=feature_names)

data_target = data_target.fillna(data_target.mode()[0])

"""Training the dataset"""

X_train, X_test, y_train, y_test = train_test_split(
    data_features, data_target, train_size=0.70, test_size=0.30, random_state=1
)

print(f"Length of X_train: {len(X_train)}")
print(f"Length of X_test: {len(X_test)}")
print(f"Length of y_train: {len(y_train)}")
print(f"Length of y_test: {len(y_test)}")

"""Building the Model for the Project"""

model = LogisticRegression()
model.fit(X_train, y_train)

"""Prediction Function"""

pred = model.predict(X_test)

"""Creating Confusion Matrix"""

class_names = ['Not Fraud', 'Fraud']
matrix = confusion_matrix(y_test, pred)
dataframe = pd.DataFrame(matrix, index=class_names, columns=class_names)
sns.heatmap(dataframe, annot=True, cbar=None, cmap="Blues", fmt='g')
plt.title("Confusion Matrix"), plt.tight_layout()
plt.ylabel("True Class"), plt.xlabel("Predicted Class")
plt.show()

"""Calculating F1 and recall value for our model."""

f1 = round(f1_score(y_test, pred), 2)
recall = round(recall_score(y_test, pred), 2)
print(f"Sensitivity/Recall for Logistic Regression Model 1: {recall}")
print(f"F1 Score for Logistic Regression Model 1: {f1}")